#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Generate a report for a Mistral workflow execution

The very simplest usage...

    $ wf-report

The latest Workflow execution will be found and a report will be generated. It
will show the workflow execution, it's tasks, action executions and
sub-workflows in a rough tree format.

If you'd rather specify the execution ID, you can do that too...

    $ wf-report WORKFLOW_EXECUTION_UUID

You can filter by state...

    $ wf-report WORKFLOW_EXECUTION_UUID --state=ERROR

This will display the same tree, but only show nodes with at least one
descendant in the ERROR state. The state can be changed to any valid Mistral
state.

There are a few other options. -h will show them. They may be useful.

NOTE: We assume you have set the following environment variables;
      OS_AUTH_URL, OS_USERNAME, OS_PASSWORD and OS_PROJECT_NAME
"""

from __future__ import print_function

import argparse
import collections
import json
import os
import time

from mistralclient.api import base as mistralclient_exc
from mistralclient.api import client as mistralclient
from mistralclient.api.v2 import executions
from mistralclient.api.v2 import tasks
from mistralclient.api.v2 import action_executions
from keystoneauth1.identity import generic as ks_auth
from keystoneauth1 import session


def _get_session():

    auth_kwargs = {
        'auth_url': os.environ.get('OS_AUTH_URL'),
        'username': os.environ.get('OS_USERNAME'),
        'password': os.environ.get('OS_PASSWORD'),
        'project_name': os.environ.get('OS_PROJECT_NAME'),
        'project_domain_name': 'Default',
        'user_domain_name': 'Default',
    }
    auth_plugin = ks_auth.Password(**auth_kwargs)
    return session.Session(auth=auth_plugin)


def _client():
    sess = _get_session()
    mistral_url = "http://192.168.24.1:8989/v2"  # TODO: get automatically
    return mistralclient.client(mistral_url=mistral_url, session=sess)


def _add_descendant_state(descendants, parents, node):
    state = node.state
    for parent in parents:
        descendants[parent.id].add(state)
    # Add outselves, for easier looking up later
    descendants[node.id].add(state)


def _iter_execution(mistral, execution, sub_wf_tasks, parents, descendants):
    tasks = mistral.tasks.list(execution.id)
    yield execution.state, parents, execution
    _add_descendant_state(descendants, parents, execution)
    parents = parents + (execution, )
    for task in tasks:
        yield task.state, parents, task
        _add_descendant_state(descendants, parents, task)
        for action_ex in mistral.action_executions.list(task.id):
            yield action_ex.state, parents + (task, ), action_ex
            _add_descendant_state(descendants, parents + (task, ), action_ex)
        if task.id in sub_wf_tasks:
            sub_wf_ex = sub_wf_tasks[task.id]
            p = parents + (task, )
            for _ in _iter_execution(
                    mistral, sub_wf_ex, sub_wf_tasks, p, descendants):
                yield _


def _format_node(indent, node, args):
    line = '{0: <8} {1: <9} {2} {3}  (ID: {4})'
    if args.workflow_executions and isinstance(node, executions.Execution):
        return line.format(node.state, 'Execution', indent, node.workflow_name,
                           node.id)
    if args.task_executions and isinstance(node, tasks.Task):
        return line.format(node.state, 'Task', indent, node.name, node.id)
    if args.action_executions and isinstance(
            node, action_executions.ActionExecution):
        return line.format(node.state, 'Action Ex', indent, node.name, node.id)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('execution_id', nargs="?")
    parser.add_argument('--state')

    parser.add_argument('-W', '--no-workflow-executions',
                        dest='workflow_executions', action='store_false')
    parser.set_defaults(workflow_executions=True)

    parser.add_argument('-T', '--no-task-executions', dest='task_executions',
                        action='store_false')
    parser.set_defaults(task_executions=True)

    parser.add_argument('-A', '--no-action-executions',
                        dest='action_executions', action='store_false')
    parser.set_defaults(action_executions=True)

    parser.add_argument('-i', '--include-output', action='store_true')

    return parser.parse_args()


def main():

    args = parse_args()
    ex_id = args.execution_id

    mistral = _client()

    if not ex_id:
        ex_id = mistral.executions.list(
            limit=1, sort_keys="updated_at", sort_dirs="desc")[0].id

    execution = mistral.executions.get(ex_id)
    sub_workflows = mistral.executions.list(root_execution_id=ex_id)
    sub_wf_tasks = {sw.task_execution_id: sw for sw in sub_workflows}

    descendants = collections.defaultdict(set)
    iter_ = _iter_execution(mistral, execution, sub_wf_tasks, (), descendants)
    for state, parents, node in list(iter_):
        if args.state and args.state not in descendants[node.id]:
            continue
        indent = "    " * len(parents)
        line = _format_node(indent, node, args)
        if line:
            print(line)
            if args.include_output and isinstance(
                    node, action_executions.ActionExecution):
                indent = "    " * (len(parents) + 1)
                output = mistral.action_executions.get(node.id).output
                result = json.loads(output)['result']
                result = json.dumps(result, indent=4, sort_keys=True)
                print(indent + result.replace('\n', '\n' + indent))


if __name__ == "__main__":
    main()
