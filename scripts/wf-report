#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import argparse
import collections
import os
import time

from mistralclient.api import base as mistralclient_exc
from mistralclient.api import client as mistralclient
from mistralclient.api.v2 import executions
from mistralclient.api.v2 import tasks
from mistralclient.api.v2 import action_executions
from keystoneauth1.identity import generic as ks_auth
from keystoneauth1 import session


def _get_session():

    auth_kwargs = {
        'auth_url': os.environ.get('OS_AUTH_URL'),
        'username': os.environ.get('OS_USERNAME'),
        'password': os.environ.get('OS_PASSWORD'),
        'project_name': os.environ.get('OS_PROJECT_NAME'),
        'project_domain_name': 'Default',
        'user_domain_name': 'Default',
    }
    auth_plugin = ks_auth.Password(**auth_kwargs)
    return session.Session(auth=auth_plugin)

def _client():
    sess = _get_session()
    mistral_url = "http://192.168.24.1:8989/v2" # TODO: get automatically
    return mistralclient.client(mistral_url=mistral_url, session=sess)

def _add_descendant_state(descendants, parents, state):
    for parent in parents:
        descendants[parent.id].add(state)

def _iter_execution(mistral, execution, sub_wf_tasks, parents, descendants):
    tasks = mistral.tasks.list(execution.id)
    yield execution.state, parents, execution
    _add_descendant_state(descendants, parents, execution.state)
    parents = parents + (execution, )
    for task in tasks:
        yield task.state, parents, task
        _add_descendant_state(descendants, parents, task.state)
        #for action_ex in mistral.action_executions.list(task.id):
        #    yield action_ex.state, parents + (action_ex, ), action_ex
        if task.id in sub_wf_tasks:
            sub_wf_ex = sub_wf_tasks[task.id]
            p = parents + (task, )
            for sub_task_state, ps, sub_task in _iter_execution(mistral, sub_wf_ex, sub_wf_tasks, p, descendants):
                yield sub_task_state, ps, sub_task

def _format_node(indent, node):
    line = '{0: <8} {1: <9} {2} {3}   (ID: {4})'
    if isinstance(node, executions.Execution):
        return line.format(node.state, 'Execution', indent, node.workflow_name, node.id)
    if isinstance(node, tasks.Task):
        return line.format(node.state, 'Task', indent, node.name, node.id)
    if isinstance(node, action_executions.ActionExecution):
        return line.format(node.state, 'Action Ex', indent, node.name, node.id)

    return node

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('execution_id')
    parser.add_argument('--state')
    return parser.parse_args()


def main():

    args = parse_args()
    ex_id = args.execution_id

    mistral = _client()

    execution = mistral.executions.get(ex_id)
    sub_workflows = mistral.executions.list(root_execution_id=ex_id)
    sub_wf_tasks = {sw.task_execution_id: sw for sw in sub_workflows}
    tasks = list(mistral.tasks.list(ex_id))

    for sub_workflow in sub_workflows:
        tasks.extend(mistral.tasks.list(sub_workflow.id))

    descendants = collections.defaultdict(set)
    for state, parents, node in list(_iter_execution(mistral, execution, sub_wf_tasks, (), descendants)):
        if args.state and (args.state != state and args.state not in descendants[node.id]):
            continue
        indent = "    " * len(parents)
        print(_format_node(indent, node))


if __name__ == "__main__":
    main()
